{
	"info": {
		"_postman_id": "2adc0ad6-e2ba-4d12-a6d9-3ed1958b6c68",
		"name": "AccountBank.Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2017086"
	},
	"item": [
		{
			"name": "Create AccountBank",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('email');",
							"  pm.expect(responseData).to.have.property('password');",
							"  pm.expect(responseData).to.have.property('errors');",
							"  pm.expect(responseData).to.have.property('isFailed');",
							"});",
							"",
							"",
							"pm.test(\"Email is null or in a valid email format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.email).to.be.oneOf([null, \"\"]).or.to.match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i);",
							"});",
							"",
							"",
							"pm.test(\"Password is null or in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.password).to.satisfy(function (password) {",
							"    return password === null || typeof password === 'string' && password.length > 0;",
							"  }, \"Password should be null or a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Errors array is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.errors).to.exist.and.to.be.an('array').and.to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"name\": \"lucas\",\r\n  \"email\": \"lvbcosta@gmail.com\",\r\n  \"password\": \"123456789\",\r\n  \"balance\": 30\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7057/AccountBank",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7057",
					"path": [
						"AccountBank"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update AccountBank",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.name).to.exist.and.to.be.null;",
							"    pm.expect(responseData.email).to.exist.and.to.be.null;",
							"    pm.expect(responseData.password).to.exist.and.to.be.null;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'errors' array is present and not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.errors).to.exist.and.to.be.an('array').and.to.have.length.above(0, \"The 'errors' array should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'isFailed' field is present and set to true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.isFailed).to.exist.and.to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \r\n    \"id\": 1,\r\n    \"name\": \"Lucas Costa\",\r\n    \"email\": \"lvbcosta2@gmail.com\",\r\n    \"password\": \"1234563472131231289\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7057/AccountBank",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7057",
					"path": [
						"AccountBank"
					]
				}
			},
			"response": []
		},
		{
			"name": "List AccountBank",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the correct Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (data) {",
							"        pm.expect(data.email).to.exist.and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'errors' array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.not.be.empty;",
							"    pm.expect(responseData[0].errors).to.exist.and.to.be.an('array').and.to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7057/AccountBank",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7057",
					"path": [
						"AccountBank"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get AccountBank",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'id' field in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Validate the name field in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Validate the email field in the response\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.email).to.exist.and.to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7057/AccountBank/1",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7057",
					"path": [
						"AccountBank",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"depositValue\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7057/AccountBank/1/deposit",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7057",
					"path": [
						"AccountBank",
						"1",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Withdraw",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountBankId\": 1,\r\n    \"withdrawValue\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7057/AccountBank/1/withdraw",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7057",
					"path": [
						"AccountBank",
						"1",
						"withdraw"
					]
				}
			},
			"response": []
		}
	]
}